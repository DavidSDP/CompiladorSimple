
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisisSintactico;

import java_cup.runtime.*;
import analisisSemantico.simbolos.SimboloArgs;
import analisisSemantico.simbolos.SimboloAsignacion;
import analisisSemantico.simbolos.SimboloClase;
import analisisSemantico.simbolos.SimboloContenido;
import analisisSemantico.simbolos.SimboloCuerpo;
import analisisSemantico.simbolos.SimboloElemento;
import analisisSemantico.simbolos.SimboloFactor;
import analisisSemantico.simbolos.SimboloFuncionInvk;
import analisisSemantico.simbolos.SimboloFuncionDecl;
import analisisSemantico.simbolos.SimboloFuncionDef;
import analisisSemantico.simbolos.SimboloNextArg;
import analisisSemantico.simbolos.SimboloNextParam;
import analisisSemantico.simbolos.SimboloOperacion;
import analisisSemantico.simbolos.SimboloOperacion1;
import analisisSemantico.simbolos.SimboloOperacion2;
import analisisSemantico.simbolos.SimboloOperacion3;
import analisisSemantico.simbolos.SimboloParams;
import analisisSemantico.simbolos.SimboloPrograma;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\007\000" +
    "\002\006\005\000\002\006\006\000\002\016\004\000\002" +
    "\016\004\000\002\015\011\000\002\014\006\000\002\017" +
    "\005\000\002\017\002\000\002\020\006\000\002\020\002" +
    "\000\002\021\004\000\002\021\005\000\002\021\002\000" +
    "\002\010\003\000\002\010\005\000\002\011\003\000\002" +
    "\011\005\000\002\012\003\000\002\012\005\000\002\013" +
    "\003\000\002\013\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\005\000\002\022\004\000\002\022\002\000\002" +
    "\023\005\000\002\023\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\004\005\001\002\000\004\002\114\001" +
    "\002\000\004\025\007\001\002\000\004\002\000\001\002" +
    "\000\004\007\010\001\002\000\014\004\ufffd\005\ufffd\006" +
    "\ufffd\010\ufffd\025\ufffd\001\002\000\014\004\005\005\014" +
    "\006\017\010\021\025\012\001\002\000\004\011\040\001" +
    "\002\000\014\004\ufffe\005\ufffe\006\ufffe\010\ufffe\025\ufffe" +
    "\001\002\000\004\025\113\001\002\000\014\004\ufffc\005" +
    "\ufffc\006\ufffc\010\ufffc\025\ufffc\001\002\000\014\004\ufffb" +
    "\005\ufffb\006\ufffb\010\ufffb\025\ufffb\001\002\000\004\025" +
    "\023\001\002\000\014\004\ufffa\005\ufffa\006\ufffa\010\ufffa" +
    "\025\ufffa\001\002\000\016\002\uffff\004\uffff\005\uffff\006" +
    "\uffff\010\uffff\025\uffff\001\002\000\014\004\ufff6\005\ufff6" +
    "\006\ufff6\010\ufff6\025\ufff6\001\002\000\004\014\024\001" +
    "\002\000\006\005\025\015\ufff1\001\002\000\004\025\104" +
    "\001\002\000\004\015\027\001\002\000\004\007\030\001" +
    "\002\000\010\005\uffec\010\uffec\025\uffec\001\002\000\010" +
    "\005\033\010\034\025\036\001\002\000\004\012\103\001" +
    "\002\000\004\025\076\001\002\000\014\004\ufff4\005\ufff4" +
    "\006\ufff4\010\ufff4\025\ufff4\001\002\000\010\005\uffee\010" +
    "\uffee\025\uffee\001\002\000\006\011\040\014\037\001\002" +
    "\000\016\014\042\015\uffdc\020\047\023\043\024\044\025" +
    "\041\001\002\000\014\014\042\020\047\023\043\024\044" +
    "\025\041\001\002\000\022\012\uffe3\013\uffe3\014\037\015" +
    "\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\001\002\000\014" +
    "\014\042\020\047\023\043\024\044\025\041\001\002\000" +
    "\020\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\022\uffe0\001\002\000\020\012\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\021\uffe2\022\uffe2\001\002\000\020\012\uffe5" +
    "\013\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\001" +
    "\002\000\020\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\021\uffdf\022\uffdf\001\002\000\020\012\uffe1\013\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\001\002\000\020" +
    "\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\063\021\uffe7\022" +
    "\uffe7\001\002\000\006\012\060\021\061\001\002\000\016" +
    "\012\uffe9\013\uffe9\015\uffe9\016\056\021\uffe9\022\uffe9\001" +
    "\002\000\014\012\uffeb\013\uffeb\015\uffeb\021\uffeb\022\054" +
    "\001\002\000\014\014\042\020\047\023\043\024\044\025" +
    "\041\001\002\000\014\012\uffe8\013\uffe8\015\uffe8\021\uffe8" +
    "\022\uffe8\001\002\000\014\014\042\020\047\023\043\024" +
    "\044\025\041\001\002\000\016\012\uffe6\013\uffe6\015\uffe6" +
    "\016\uffe6\021\uffe6\022\uffe6\001\002\000\014\004\ufff7\005" +
    "\ufff7\006\ufff7\010\ufff7\025\ufff7\001\002\000\014\014\042" +
    "\020\047\023\043\024\044\025\041\001\002\000\012\012" +
    "\uffea\013\uffea\015\uffea\021\uffea\001\002\000\014\014\042" +
    "\020\047\023\043\024\044\025\041\001\002\000\020\012" +
    "\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4" +
    "\001\002\000\006\015\066\021\061\001\002\000\020\012" +
    "\uffde\013\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde" +
    "\001\002\000\004\015\075\001\002\000\010\013\072\015" +
    "\uffda\021\061\001\002\000\004\015\uffdd\001\002\000\014" +
    "\014\042\020\047\023\043\024\044\025\041\001\002\000" +
    "\010\013\072\015\uffda\021\061\001\002\000\004\015\uffdb" +
    "\001\002\000\020\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\021\ufff3\022\ufff3\001\002\000\006\011\100\012\077" +
    "\001\002\000\014\004\ufff8\005\ufff8\006\ufff8\010\ufff8\025" +
    "\ufff8\001\002\000\014\014\042\020\047\023\043\024\044" +
    "\025\041\001\002\000\006\012\102\021\061\001\002\000" +
    "\014\004\ufff9\005\ufff9\006\ufff9\010\ufff9\025\ufff9\001\002" +
    "\000\010\005\uffed\010\uffed\025\uffed\001\002\000\006\013" +
    "\105\015\uffef\001\002\000\004\005\107\001\002\000\004" +
    "\015\ufff2\001\002\000\004\025\110\001\002\000\006\013" +
    "\105\015\uffef\001\002\000\004\015\ufff0\001\002\000\014" +
    "\004\ufff5\005\ufff5\006\ufff5\010\ufff5\025\ufff5\001\002\000" +
    "\010\011\100\012\077\014\024\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\010\001\001\000\012\003\017\005\012\006" +
    "\014\016\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\030\001\001\000\006\006\034\014" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\044\010\067\011\052\012\051\013\047\014\045\022\066" +
    "\001\001\000\016\007\044\010\050\011\052\012\051\013" +
    "\047\014\045\001\001\000\002\001\001\000\016\007\044" +
    "\010\064\011\052\012\051\013\047\014\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\054" +
    "\014\045\001\001\000\002\001\001\000\006\007\056\014" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\061\014\045\001\001\000\002\001\001\000\006\007" +
    "\063\014\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\070\001" +
    "\001\000\002\001\001\000\016\007\044\010\072\011\052" +
    "\012\051\013\047\014\045\001\001\000\004\023\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\044\010\100\011\052\012" +
    "\051\013\047\014\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimboloPrograma start_val = (SimboloPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= clase 
            {
              SimboloPrograma RESULT =null;
		 System.out.println("NUEVO PROGRAMA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // clase ::= tclass id llaveIzq cuerpo llaveDer 
            {
              SimboloClase RESULT =null;
		 System.out.println("NUEVA CLASE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= cuerpo elemento 
            {
              SimboloCuerpo RESULT =null;
		 System.out.println("NUEVO CUERPO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= 
            {
              SimboloCuerpo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= asignacion 
            {
              SimboloElemento RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elemento ::= funcionDecl 
            {
              SimboloElemento RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= clase 
            {
              SimboloElemento RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // asignacion ::= tipoVar id igual Operacion puntocoma 
            {
              SimboloAsignacion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // asignacion ::= tipoVar id puntocoma 
            {
              SimboloAsignacion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asignacion ::= id igual Operacion puntocoma 
            {
              SimboloAsignacion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcionDecl ::= tipoVoid funcionDef 
            {
              SimboloFuncionDecl RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcionDecl ::= tipoVar funcionDef 
            {
              SimboloFuncionDecl RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcionDef ::= id parenIzq args parenDer llaveIzq contenido llaveDer 
            {
              SimboloFuncionDef RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionDef",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcionInvk ::= id parenIzq params parenDer 
            {
              SimboloFuncionInvk RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionInvk",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // args ::= tipoVar id nextArg 
            {
              SimboloArgs RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // args ::= 
            {
              SimboloArgs RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nextArg ::= coma tipoVar id nextArg 
            {
              SimboloNextArg RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nextArg",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nextArg ::= 
            {
              SimboloNextArg RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nextArg",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contenido ::= contenido asignacion 
            {
              SimboloContenido RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contenido ::= contenido funcionInvk puntocoma 
            {
              SimboloContenido RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contenido ::= 
            {
              SimboloContenido RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contenido",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Operacion ::= Operacion1 
            {
              SimboloOperacion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Operacion ::= Operacion opSuma factor 
            {
              SimboloOperacion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Operacion1 ::= Operacion2 
            {
              SimboloOperacion1 RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Operacion1 ::= Operacion1 opProd factor 
            {
              SimboloOperacion1 RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Operacion2 ::= Operacion3 
            {
              SimboloOperacion2 RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Operacion2 ::= Operacion2 comparador factor 
            {
              SimboloOperacion2 RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Operacion3 ::= factor 
            {
              SimboloOperacion3 RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Operacion3 ::= Operacion3 opLogico factor 
            {
              SimboloOperacion3 RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operacion3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= id 
            {
              SimboloFactor RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= numero 
            {
              SimboloFactor RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= booleano 
            {
              SimboloFactor RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= string 
            {
              SimboloFactor RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= funcionInvk 
            {
              SimboloFactor RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= parenIzq Operacion parenDer 
            {
              SimboloFactor RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // params ::= Operacion nextParam 
            {
              SimboloParams RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= 
            {
              SimboloParams RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nextParam ::= coma Operacion nextParam 
            {
              SimboloNextParam RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nextParam",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nextParam ::= 
            {
              SimboloNextParam RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nextParam",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
