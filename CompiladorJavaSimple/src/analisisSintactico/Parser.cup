package analisisSintactico;

import java_cup.runtime.*;
import analisisSemantico.simbolos.SimboloArgs;
import analisisSemantico.simbolos.SimboloAsignacion;
import analisisSemantico.simbolos.SimboloClase;
import analisisSemantico.simbolos.SimboloContenido;
import analisisSemantico.simbolos.SimboloCuerpo;
import analisisSemantico.simbolos.SimboloElemento;
import analisisSemantico.simbolos.SimboloFactor;
import analisisSemantico.simbolos.SimboloFuncionInvk;
import analisisSemantico.simbolos.SimboloFuncionDecl;
import analisisSemantico.simbolos.SimboloFuncionDef;
import analisisSemantico.simbolos.SimboloNextArg;
import analisisSemantico.simbolos.SimboloNextParam;
import analisisSemantico.simbolos.SimboloOperacion;
import analisisSemantico.simbolos.SimboloOperacion1;
import analisisSemantico.simbolos.SimboloOperacion2;
import analisisSemantico.simbolos.SimboloOperacion3;
import analisisSemantico.simbolos.SimboloParams;
import analisisSemantico.simbolos.SimboloPrograma;

terminal    ComplexSymbol	tclass, tipoVar, tipoVoid, llaveIzq, llaveDer;
terminal    ComplexSymbol	igual, puntocoma, coma, parenIzq, parenDer;
terminal	ComplexSymbol	comparador, opLogico, booleano, opSuma, opProd;
terminal	ComplexSymbol	string, numero, id;

non terminal	SimboloPrograma	programa;
non terminal	SimboloClase	clase;
non terminal	SimboloCuerpo	cuerpo;
non terminal	SimboloElemento	elemento;
non terminal	SimboloAsignacion	asignacion;
non terminal  	SimboloFactor	factor;
non terminal	SimboloOperacion	Operacion;
non terminal	SimboloOperacion1	Operacion1;
non terminal	SimboloOperacion2	Operacion2;
non terminal	SimboloOperacion3	Operacion3;
non terminal  	SimboloFuncionInvk	funcionInvk;
non terminal	SimboloFuncionDef	funcionDef;
non terminal	SimboloFuncionDecl	funcionDecl;
non terminal	SimboloArgs			args;
non terminal	SimboloNextArg		nextArg;
non terminal	SimboloContenido	contenido;
non terminal	SimboloParams		params;
non terminal	SimboloNextParam	nextParam;

start with programa;

programa ::=  clase	{: System.out.println("NUEVO PROGRAMA"); :}
			;
			
clase	::=	tclass id llaveIzq cuerpo llaveDer {: System.out.println("NUEVA CLASE"); :}
			;
			
cuerpo ::= cuerpo elemento 	{: System.out.println("NUEVO CUERPO"); :}
			|
			;
			
elemento ::= asignacion 	{: :}
			| funcionDecl	{: :}
			| clase			{: :}
			;
			
asignacion ::= tipoVar id igual Operacion puntocoma {: :}
			| tipoVar id puntocoma 					{: :}
			| id igual Operacion puntocoma 			{: :}
			;

funcionDecl ::= tipoVoid funcionDef 	{: :}
			| tipoVar funcionDef 	{: :}
			;

funcionDef ::= id parenIzq args parenDer llaveIzq contenido llaveDer {: :}
			;
		
funcionInvk ::= id parenIzq params parenDer {: :}
		;
			
args ::= tipoVar id nextArg 	{: :}
		| 						{: :}
		;

nextArg ::= coma tipoVar id nextArg	{: :}
		|							{: :}
		;
		
contenido ::= contenido asignacion 				{: :}
			| contenido funcionInvk puntocoma 	{: :}
			| 									{: :}
			;
		
Operacion ::= Operacion1				{: :}
		| Operacion opSuma factor		{: :}
		;
	
Operacion1 ::= Operacion2				{: :}
		| Operacion1 opProd factor		{: :}
		;
		
Operacion2 ::= Operacion3				{: :}
		| Operacion2 comparador factor 	{: :}
		;
		
Operacion3 ::= factor 					{: :}
		| Operacion3 opLogico factor	{: :}
		;
	
factor ::= id 							{: :}
		| numero 						{: :}
		| booleano						{: :}
		| string						{: :}
		| funcionInvk						{: :}
		| parenIzq Operacion parenDer 	{: :}
		;
		
params ::= Operacion nextParam	{: :}
		| 						{: :}
		;

nextParam ::= coma Operacion nextParam	{: :}
			| 							{: :}
			;