package analisisSintactico;

import analisisSemantico.simbolos.*;
import analisisLexico.GlobalVariables;

terminal    String			tclass, tipoVar, returnSym, tipoVoid, llaveIzq, llaveDer;
terminal    String			igual, puntocoma, coma, parenIzq, parenDer;
terminal	String			comparador, opLogico, booleano, opSuma, opProd;
terminal	String			string;
terminal	String			numero;
terminal	String			id;

non terminal	SimboloExpresion	expresion;
non terminal	SimboloPrograma		programa;
non terminal	SimboloClase		clase;
non terminal	SimboloCuerpo		cuerpo;
non terminal	SimboloElemento		elemento;
non terminal	SimboloAsignacion	asignacion;
non terminal  	SimboloFactor		factor;
non terminal	SimboloOperacion	Operacion;
non terminal	SimboloOperacion	Operacion1;
non terminal	SimboloOperacion	Operacion2;
non terminal	SimboloOperacion	Operacion3;
non terminal  	SimboloFuncionInvk	funcionInvk;
non terminal	SimboloFuncionDecl	funcionDecl;
non terminal	SimboloArgs			args;
non terminal	SimboloArgs			nextArg;
non terminal	SimboloContenido	contenido;
non terminal	SimboloParams		params;
non terminal	SimboloParams		nextParam;

start with programa;

programa ::=  												{: GlobalVariables.entraBloque();
															:}
			clase:c
															{: GlobalVariables.saleBloque();
																RESULT = new SimboloPrograma(c);
															:}
			;
			
clase	::=	tclass:t id:i 									{: GlobalVariables.asignaID(i,t);
															:}
			llaveIzq 										{: GlobalVariables.entraBloque();
															:}
			cuerpo:c										{: GlobalVariables.saleBloque();
																
															:}
			llaveDer										{: RESULT = new SimboloClase(t,i,c);
															:}
			;
			
cuerpo ::= cuerpo:c elemento:e 								{: RESULT = new SimboloCuerpo(c,e); :}
			|												{: RESULT = null; :}
			;
			
elemento ::= asignacion:a 									{: RESULT = new SimboloElemento(a); :}
			| funcionDecl:f									{: RESULT = new SimboloElemento(f); :}
			| clase:c										{: RESULT = new SimboloElemento(c); :}
			;
			
asignacion ::= tipoVar:t id:i								{: GlobalVariables.asignaID(i,t);
															:}
				igual Operacion:o puntocoma 				{: RESULT = new SimboloAsignacion(t,i,o);
															:}
			| tipoVar:t id:i puntocoma 						{: GlobalVariables.asignaID(i,t);
																RESULT = new SimboloAsignacion(t,i);
															:}
			| id:i 											{: GlobalVariables.compruebaID(i);
															:}
				igual Operacion:o puntocoma 				{:	RESULT = new SimboloAsignacion(i,o);
															:}
			;

funcionDecl ::= tipoVar:t id:i 								{: GlobalVariables.asignaFuncionID(i,t);
															:}
				parenIzq									{: GlobalVariables.entraBloque();
															:}
				args:a										{: GlobalVariables.asignaFuncionArgs(i,a);
															:}
				parenDer llaveIzq							{: :}
				contenido:c									{: GlobalVariables.saleBloque();
															:}
				llaveDer									{: RESULT = new SimboloFuncionDecl(i,t);
															:}
				|
				tipoVoid:t id:i 							{: GlobalVariables.asignaFuncionID(i,t);
															:}
				parenIzq									{: GlobalVariables.entraBloque();
															:}
				args:a										{: GlobalVariables.asignaFuncionArgs(i,a);
															:}
				parenDer llaveIzq							{: :}
				contenido:c									{: GlobalVariables.saleBloque();
															:}
				llaveDer									{: RESULT = new SimboloFuncionDecl(i,t);
															:}
			;
		
funcionInvk ::= id:i										{: GlobalVariables.compruebaFuncionID(i);
															:}
				parenIzq params:p 							{: :}
				parenDer									{: RESULT = new SimboloFuncionInvk(i,p);
															:}
		;
			
args ::= tipoVar:t id:i 									{: GlobalVariables.asignaID(i,t);
															:}
			nextArg:n										{: RESULT = new SimboloArgs(t,i,n);
															:}
		| 													{: RESULT = null;
															:}
		;

nextArg ::= coma tipoVar:t id:i 							{: GlobalVariables.asignaID(i,t);
															:}
				nextArg:n									{: RESULT = new SimboloArgs(t,i,n);
															:}
		|													{: RESULT = null;
															:}
		;
		
contenido ::= contenido:c expresion:e						{: RESULT = new SimboloContenido(c,e); :}
			| contenido:c returnSym:r Operacion:o puntocoma	{: RESULT = new SimboloContenido(c,r,o); :}
			| 												{: RESULT = null; :}
			;
			
expresion ::= asignacion:a 									{: RESULT = new SimboloExpresion(a); :}
			| funcionInvk:f puntocoma						{: RESULT = new SimboloExpresion(f); :}
			;
		
Operacion ::= Operacion1:o									{: RESULT = new SimboloOperacion(o); :}
		| Operacion:o opSuma:s factor:f						{: RESULT = new SimboloOperacion(o,s,f); :}
		;
	
Operacion1 ::= Operacion2:o									{: RESULT = new SimboloOperacion(o); :}
		| Operacion1:o opProd:p factor:f					{: RESULT = new SimboloOperacion(o,p,f); :}
		;
		
Operacion2 ::= Operacion3:o									{: RESULT = new SimboloOperacion(o); :}
		| Operacion2:o comparador:c factor:f 				{: RESULT = new SimboloOperacion(o,c,f); :}
		;
		
Operacion3 ::= factor:f 									{: RESULT = new SimboloOperacion(f); :}
		| Operacion3:o opLogico:l factor:f					{: RESULT = new SimboloOperacion(o,l,f); :}
		;
	
factor ::= id:i 											{: GlobalVariables.compruebaID(i);
																RESULT = new SimboloFactor(i);
															:}
		| numero:n 											{: RESULT = new SimboloFactor(n); :}
		| booleano:b										{: RESULT = new SimboloFactor(b); :}
		| string:s											{: RESULT = new SimboloFactor(s); :}
		| funcionInvk:f										{: RESULT = new SimboloFactor(f); :}
		| parenIzq Operacion:o parenDer 					{: RESULT = new SimboloFactor(o); :}
		;
		
params ::= Operacion:o nextParam:n							{: RESULT = new SimboloParams(o,n); :}
		| 													{: RESULT = null; :}
		;

nextParam ::= coma Operacion:o nextParam:n 					{: RESULT = new SimboloParams(o,n); :}
			| 												{: RESULT = null; :}
			;